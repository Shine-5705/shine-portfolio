---
import style from '../../assets/styles/Project.module.scss';
import { Image } from 'astro:assets';
import atom from '../../assets/images/atom.png';

// GitHub repositories to display
const repositories = [
  {
    url: "https://github.com/sinhaparth5/shine-portfolio",
    image: "/og-image.jpeg"
  },
  {
    url: "https://github.com/sinhaparth5/shine-portfolio",
    image: "/og-image.jpeg"
  },
  {
    url: "https://github.com/sinhaparth5/shine-portfolio", 
    image: "/og-image.jpeg"
  },
  {
    url: "https://github.com/sinhaparth5/shine-portfolio",
    image: "/og-image.jpeg"
  },
  {
    url: "https://github.com/sinhaparth5/shine-portfolio",
    image: "/og-image.jpeg"
  },
  {
    url: "https://github.com/sinhaparth5/shine-portfolio",
    image: "/og-image.jpeg"
  }
];

// Function to extract owner and repo from GitHub URL
function parseGitHubUrl(url: string) {
  const match = url.match(/github\.com\/([^\/]+)\/([^\/]+)/);
  return match ? { owner: match[1], repo: match[2] } : null;
}

// Fetch GitHub data for each repository
async function fetchGitHubData() {
  const projects = [];
  
  for (const repo of repositories) {
    const parsed = parseGitHubUrl(repo.url);
    if (!parsed) continue;
    
    try {
      const response = await fetch(`https://api.github.com/repos/${parsed.owner}/${parsed.repo}`);
      if (response.ok) {
        const data = await response.json();
        projects.push({
          id: data.id,
          title: data.name,
          description: data.description || "No description available",
          stars: data.stargazers_count,
          language: data.language,
          topics: data.topics || [],
          github: data.html_url,
          image: repo.image,
          updated: new Date(data.updated_at).toLocaleDateString()
        });
      }
    } catch (error) {
      console.error(`Failed to fetch data for ${repo.url}:`, error);
    }
  }
  
  return projects;
}

// Fetch projects data
const projects = await fetchGitHubData();
---

<section class={`${style.projectsContainer} projects-container`}>
  <!-- Floating background elements -->
  <div class={style.floatingElements}>
    <div class={`${style.floatingIcon} floating-icon-1`}>
      <Image src={atom} alt="" />
    </div>
    <div class={`${style.floatingIcon} floating-icon-2`}>
      <Image src={atom} alt="" />
    </div>
    <div class={`${style.floatingIcon} floating-icon-3`}>
      <Image src={atom} alt="" />
    </div>
    <div class={`${style.floatingIcon} floating-icon-4`}>
      <Image src={atom} alt="" />
    </div>
    <div class={`${style.floatingIcon} floating-icon-5`}>
      <Image src={atom} alt="" />
    </div>
  </div>

  <div class={style.projectsContent}>
    <div class={style.sectionHeader}>
      <span class={`${style.sectionTag} section-tag`}>Featured Work</span>
      <h2 class={`${style.sectionTitle} section-title`}>My Projects</h2>
      <div class={`${style.titleUnderline} title-underline`}></div>
    </div>

    <div class={`${style.marqueeWrapper} projects-marquee`}>
      <div class={`${style.marqueeContent} marquee-content`}>
        {projects.concat(projects).map((project, index) => (
          <div class={`${style.projectCard} project-card`}>
            <div class={style.cardInner}>
              
              <!-- Front of card -->
              <div class={`${style.cardFront} card-front`}>
                <div class={style.projectImage}>
                  <Image 
                    src={project.image} 
                    alt={project.title} 
                    width={350} 
                    height={315}
                    format="webp"
                    quality={80}
                  />
                  <div class={style.imageOverlay}></div>
                </div>
                <div class={style.projectInfo}>
                  <div class={style.projectHeader}>
                    <h3 class={style.projectTitle}>{project.title}</h3>
                    <div class={style.projectStats}>
                      <span class={style.stars}>‚≠ê {project.stars}</span>
                      {project.language && (
                        <span class={style.language}>{project.language}</span>
                      )}
                    </div>
                  </div>
                </div>
              </div>

              <!-- Back of card -->
              <div class={`${style.cardBack} card-back`}>
                <div class={style.projectDetails}>
                  <div class={style.projectHeader}>
                    <h3 class={style.backTitle}>{project.title}</h3>
                  </div>
                  
                  <div class={style.projectContent}>
                    <p class={style.description}>{project.description}</p>
                    
                    {project.topics.length > 0 && (
                      <div class={style.topicTags}>
                        {project.topics.slice(0, 3).map((topic: string) => (
                          <span class={style.topicTag}>{topic}</span>
                        ))}
                      </div>
                    )}
                  </div>
                  
                  <div class={style.projectMeta}>
                    <span class={style.updated}>Updated: {project.updated}</span>
                    <div class={style.projectActions}>
                      <a 
                        href={project.github} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        class={style.githubLink}
                      >
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                          <path d="M12 0C5.37 0 0 5.37 0 12c0 5.31 3.435 9.795 8.205 11.385.6.105.825-.255.825-.57 0-.285-.015-1.23-.015-2.235-3.015.555-3.795-.735-4.035-1.41-.135-.345-.72-1.41-1.23-1.695-.42-.225-1.02-.78-.015-.795.945-.015 1.62.87 1.845 1.23 1.08 1.815 2.805 1.305 3.495.99.105-.78.42-1.305.765-1.605-2.67-.3-5.46-1.335-5.46-5.925 0-1.305.465-2.385 1.23-3.225-.12-.3-.54-1.53.12-3.18 0 0 1.005-.315 3.3 1.23.96-.27 1.98-.405 3-.405s2.04.135 3 .405c2.295-1.56 3.3-1.23 3.3-1.23.66 1.65.24 2.88.12 3.18.765.84 1.23 1.905 1.23 3.225 0 4.605-2.805 5.625-5.475 5.925.435.375.81 1.095.81 2.22 0 1.605-.015 2.895-.015 3.3 0 .315.225.69.825.57A12.02 12.02 0 0024 12c0-6.63-5.37-12-12-12z"/>
                        </svg>
                        View Code
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</section>

<script>
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';

  gsap.registerPlugin(ScrollTrigger);

  document.addEventListener('DOMContentLoaded', () => {
    const marquee = document.querySelector('.projects-marquee');
    const cards = document.querySelectorAll('.project-card');
    
    // Floating elements animation
    const floatingIcons = document.querySelectorAll('.floating-icon-1, .floating-icon-2, .floating-icon-3, .floating-icon-4, .floating-icon-5');
    
    floatingIcons.forEach((icon, index) => {
      // Random initial positions
      gsap.set(icon, {
        x: Math.random() * window.innerWidth,
        y: Math.random() * window.innerHeight,
        rotation: Math.random() * 360,
        scale: 0.6 + Math.random() * 0.4
      });
      
      // Continuous floating animation
      gsap.to(icon, {
        x: `+=${(Math.random() - 0.5) * 400}`,
        y: `+=${(Math.random() - 0.5) * 300}`,
        rotation: `+=${360 + Math.random() * 360}`,
        duration: 20 + Math.random() * 15,
        ease: "none",
        repeat: -1,
        yoyo: true,
        delay: index * 2
      });
      
      // Subtle scale pulse
      gsap.to(icon, {
        scale: `+=${0.2 + Math.random() * 0.3}`,
        duration: 3 + Math.random() * 4,
        ease: "power2.inOut",
        repeat: -1,
        yoyo: true,
        delay: index * 0.5
      });
      
      // Opacity breathing effect
      gsap.to(icon, {
        opacity: 0.3 + Math.random() * 0.4,
        duration: 4 + Math.random() * 3,
        ease: "power2.inOut",
        repeat: -1,
        yoyo: true,
        delay: index * 1.2
      });
    });
    
    // Parallax effect on scroll
    ScrollTrigger.batch('.floating-icon-1, .floating-icon-2, .floating-icon-3, .floating-icon-4, .floating-icon-5', {
      onUpdate: (elements) => {
        elements.forEach((element, index) => {
          const speed = 0.5 + (index * 0.2);
          const yPos = -(window.scrollY * speed);
          gsap.set(element, { y: yPos });
        });
      }
    });
    
    // Marquee animation
    const marqueeAnimation = gsap.to('.marquee-content', {
      x: '-50%',
      duration: 40,
      ease: 'none',
      repeat: -1
    });

    // Pause on hover
    marquee?.addEventListener('mouseenter', () => {
      marqueeAnimation.pause();
      gsap.to('.marquee-content', { scale: 1.02, duration: 0.3, ease: 'power2.out' });
    });

    marquee?.addEventListener('mouseleave', () => {
      marqueeAnimation.resume();
      gsap.to('.marquee-content', { scale: 1, duration: 0.3, ease: 'power2.out' });
    });

    // Card flip animations
    cards.forEach(card => {
      const front = card.querySelector('.card-front');
      const back = card.querySelector('.card-back');
      
      // Set initial states
      gsap.set(back, { rotationY: 180 });
      
      card.addEventListener('mouseenter', () => {
        gsap.to(front, { rotationY: -180, duration: 0.6, ease: 'power2.inOut' });
        gsap.to(back, { rotationY: 0, duration: 0.6, ease: 'power2.inOut' });
      });
      
      card.addEventListener('mouseleave', () => {
        gsap.to(front, { rotationY: 0, duration: 0.6, ease: 'power2.inOut' });
        gsap.to(back, { rotationY: 180, duration: 0.6, ease: 'power2.inOut' });
      });
    });

    // Section reveal animation
    gsap.timeline({
      scrollTrigger: {
        trigger: '.projects-container',
        start: 'top 80%',
        toggleActions: 'play none none reverse'
      }
    })
    .fromTo('.section-tag', { y: 30, opacity: 0 }, { duration: 0.8, y: 0, opacity: 1, ease: 'power3.out' })
    .fromTo('.section-title', { y: 50, opacity: 0 }, { duration: 1, y: 0, opacity: 1, ease: 'power3.out' }, '-=0.6')
    .fromTo('.title-underline', { scaleX: 0 }, { duration: 1, scaleX: 1, ease: 'power3.out' }, '-=0.4');
  });
</script>