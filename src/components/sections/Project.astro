---
import style from '../../assets/styles/Project.module.scss';
import { Image } from 'astro:assets';

const repositories = [
    { url: "https://github.com/sinhaparth5/shine-portfolio", image: "/og-image.jpeg" },
    { url: "https://github.com/sinhaparth5/shine-portfolio", image: "/og-image.jpeg" },
    { url: "https://github.com/sinhaparth5/shine-portfolio", image: "/og-image.jpeg" },
    { url: "https://github.com/sinhaparth5/shine-portfolio", image: "/og-image.jpeg" },
    { url: "https://github.com/sinhaparth5/shine-portfolio", image: "/og-image.jpeg" },
    { url: "https://github.com/sinhaparth5/shine-portfolio", image: "/og-image.jpeg" }
];

const parseGitHubUrl = (url: string) => {
    const match = url.match(/github\.com\/([^\/]+)\/([^\/]+)/);
    return match ? { owner: match[1], repo: match[2] } : null;
};

const fetchGitHubData = async () => {
    const projects = [];
    for (const repo of repositories) {
        const parsed = parseGitHubUrl(repo.url);
        if (!parsed) continue;

        try {
            const response = await fetch(`https://api.github.com/repos/${parsed.owner}/${parsed.repo}`);
            if (response.ok) {
                const data = await response.json();
                projects.push({
                    id: data.id,
                    title: data.name,
                    description: data.description || "No description available",
                    stars: data.stargazers_count,
                    language: data.language,
                    topics: data.topics || [],
                    github: data.html_url,
                    image: repo.image,
                    updated: new Date(data.updated_at).toLocaleDateString()
                });
            }
        } catch (error) {
            console.error(`Failed to fetch data for ${repo.url}:`, error);
        }
    }
    return projects;
};

const projects = await fetchGitHubData();
---

<section class={`${style.projectsContainer} projects-container`}>
    <div class={style.floatingElements}>
        <div class={`${style.floatingIcon} floating-icon-1`} data-icon-id="1">
            <svg viewBox="0 0 128 128">
                <path fill="#FFD845" d="M40 68V57.921C40 50.948 46.218 45 53.383 45h21.102C80.359 45 84 39.96 84 34.062V13.945c0-5.726-4.306-10.026-10.04-10.981a62.801 62.801 0 00-10.743-.862c-3.611.017-7.339.324-10.374.862C43.902 4.542 42 7.848 42 13.945V22h21v3H34.891c-6.14 0-11.516 3.53-13.198 10.552-1.939 8.047-2.025 13.202 0 21.605C23.195 63.411 26.782 68 32.921 68H40z"></path>
            </svg>
        </div>
        <div class={`${style.floatingIcon} floating-icon-2`} data-icon-id="2">
            <svg viewBox="0 0 128 128">
                <path d="M128 128H0V0h128v128z" style="fill:#d00000"></path>
                <path d="M34.1 99.3c0 .1.1.2.1.3l2.2 2.2c.1.1.2.1.3.1h7.5c.1 0 .2-.1.3-.1l2.2-2.2c.1-.1.1-.2.1-.3V75.5c0-.1.1-.2.1-.3l9.5-9.1c.1-.1.2-.1.2 0l24.1 35.6c.1.1.2.1.3.1h10.6c.1 0 .2-.1.3-.2l1.9-3.7v-.3L65.7 56.9c-.1-.1 0-.2 0-.3l25.9-25.8c.1-.1.1-.2.1-.3V30c0-.1 0-.2-.1-.3l-1.5-3.4c0-.1-.1-.2-.2-.2H79.4c-.1 0-.2.1-.3.1L47 58.5c-.1.1-.1 0-.1-.1V28.9c0-.1-.1-.2-.1-.3l-2.2-2.3c-.1-.1-.2-.1-.3-.1h-7.6c-.1 0-.2.1-.3.1l-2.2 2.4c-.1.1-.1.2-.1.3v70.3z" style="fill:#fff"></path>
            </svg>
        </div>
        <div class={`${style.floatingIcon} floating-icon-3`} data-icon-id="3">
            <svg viewBox="0 0 128 128">
                <path d="m61.55 128-21.84-12.68V40.55L6.81 59.56l.08-28.32L61.55 0zM66.46 0v128l21.84-12.68V79.31l16.49 9.53-.1-24.63-16.39-9.36v-14.3l32.89 19.01-.08-28.32z" fill="#ff6f00"></path>
            </svg>
        </div>
        <div class={`${style.floatingIcon} floating-icon-4`} data-icon-id="4">
            <svg viewBox="0 0 128 128">
                <path d="M112.871 66.602c9.004 5.277 15.055 15.027 15.074 26.191.032 16.805-13.617 30.453-30.48 30.48-16.863.032-30.559-13.57-30.59-30.375-.02-11.164 5.996-20.933 14.984-26.246l8.774 14.778c.219.37.094.847-.262 1.09-3.32 2.25-5.496 6.046-5.488 10.347.012 6.895 5.633 12.477 12.55 12.461 6.919-.012 12.516-5.61 12.504-12.504-.007-4.3-2.195-8.09-5.523-10.328-.355-.242-.484-.719-.266-1.09zm0 0" fill="#128dff"></path>
            </svg>
        </div>
        <div class={`${style.floatingIcon} floating-icon-5`} data-icon-id="5">
            <svg viewBox="0 0 128 128">
                <path fill="#fff" d="M63.975 125.09c-16.317 0-31.658-6.355-43.197-17.893S2.885 80.318 2.885 64 9.24 32.341 20.778 20.803 47.657 2.91 63.975 2.91s31.659 6.355 43.198 17.893S125.065 47.682 125.065 64s-6.355 31.659-17.893 43.198-26.879 17.892-43.197 17.892z"></path>
            </svg>
        </div>
    </div>

    <div class={style.projectsContent}>
        <div class={style.sectionHeader}>
            <span class={`${style.sectionTag} section-tag`}>Featured Work</span>
            <h2 class={`${style.sectionTitle} section-title`}>My Projects</h2>
            <div class={`${style.titleUnderline} title-underline`}></div>
        </div>

        <div class={`${style.marqueeWrapper} projects-marquee`}>
            <div class={`${style.marqueeContent} marquee-content`}>
                {projects.concat(projects).map((project, index) => (
                    <div class={`${style.projectCard} project-card`}>
                        <div class={style.cardInner}>
                            <div class={`${style.cardFront} card-front`}>
                                <div class={style.projectImage}>
                                    <Image
                                        src={project.image}
                                        alt={project.title}
                                        width={350}
                                        height={315}
                                        format="webp"
                                        quality={80}
                                    />
                                    <div class={style.imageOverlay}></div>
                                </div>
                                <div class={style.projectInfo}>
                                    <div class={style.projectHeader}>
                                        <h3 class={style.projectTitle}>{project.title}</h3>
                                        <div class={style.projectStats}>
                                            <span class={style.stars}>‚≠ê {project.stars}</span>
                                            {project.language && (
                                                <span class={style.language}>{project.language}</span>
                                            )}
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class={`${style.cardBack} card-back`}>
                                <div class={style.projectDetails}>
                                    <div class={style.projectHeader}>
                                        <h3 class={style.backTitle}>{project.title}</h3>
                                    </div>

                                    <div class={style.projectContent}>
                                        <p class={style.description}>{project.description}</p>

                                        {project.topics.length > 0 && (
                                            <div class={style.topicTags}>
                                                {project.topics.slice(0, 3).map((topic: string) => (
                                                    <span class={style.topicTag}>{topic}</span>
                                                ))}
                                            </div>
                                        )}
                                    </div>

                                    <div class={style.projectMeta}>
                                        <span class={style.updated}>Updated: {project.updated}</span>
                                        <div class={style.projectActions}>
                                            <a
                                                href={project.github}
                                                target="_blank"
                                                rel="noopener noreferrer"
                                                class={style.githubLink}
                                            >
                                                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                                    <path d="M12 0C5.37 0 0 5.37 0 12c0 5.31 3.435 9.795 8.205 11.385.6.105.825-.255.825-.57 0-.285-.015-1.23-.015-2.235-3.015.555-3.795-.735-4.035-1.41-.135-.345-.72-1.41-1.23-1.695-.42-.225-1.02-.78-.015-.795.945-.015 1.62.87 1.845 1.23 1.08 1.815 2.805 1.305 3.495.99.105-.78.42-1.305.765-1.605-2.67-.3-5.46-1.335-5.46-5.925 0-1.305.465-2.385 1.23-3.225-.12-.3-.54-1.53.12-3.18 0 0 1.005-.315 3.3 1.23.96-.27 1.98-.405 3-.405s2.04.135 3 .405c2.295-1.56 3.3-1.23 3.3-1.23.66 1.65.24 2.88.12 3.18.765.84 1.23 1.905 1.23 3.225 0 4.605-2.805 5.625-5.475 5.925.435.375.81 1.095.81 2.22 0 1.605-.015 2.895-.015 3.3 0 .315.225.69.825.57A12.02 12.02 0 0024 12c0-6.63-5.37-12-12-12z"/>
                                                </svg>
                                                View Code
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    </div>
</section>

<script>
    import { gsap } from 'gsap';
    import { ScrollTrigger } from 'gsap/ScrollTrigger';
    import { createAnimations } from '../../lib/WASMAnimations';

    gsap.registerPlugin(ScrollTrigger);

    document.addEventListener('DOMContentLoaded', async () => {
        const animations = await createAnimations();
        const marquee = document.querySelector('.projects-marquee') as HTMLElement;
        const cards = document.querySelectorAll('.project-card');
        const floatingIcons = document.querySelectorAll('[data-icon-id]') as NodeListOf<HTMLElement>;

        // Wait for section to be rendered then position icons
        setTimeout(() => {
            floatingIcons.forEach((icon, index) => {
                const iconId = parseInt(icon.dataset.iconId || '0');
                animations.addIcon(icon, iconId);

                const projectSection = document.querySelector('.projects-container') as HTMLElement;
                if (!projectSection) return;

                const sectionRect = projectSection.getBoundingClientRect();
                const sectionWidth = sectionRect.width;
                const sectionHeight = sectionRect.height;
                
                // Position icons relative to the section, not viewport
                const padding = 80;
                const positionAreas = [
                    { x: padding, y: padding }, // top-left
                    { x: sectionWidth - padding, y: padding }, // top-right  
                    { x: padding, y: sectionHeight / 2 }, // middle-left
                    { x: sectionWidth - padding, y: sectionHeight / 2 }, // middle-right
                    { x: sectionWidth / 2, y: sectionHeight - padding } // bottom-center
                ];

                const area = positionAreas[index] || positionAreas[0];
                const randomOffsetX = (Math.random() - 0.5) * 200;
                const randomOffsetY = (Math.random() - 0.5) * 200;

                gsap.set(icon, {
                    x: area.x + randomOffsetX,
                    y: area.y + randomOffsetY,
                    rotation: Math.random() * 360,
                    scale: 0.6 + Math.random() * 0.4,
                    position: 'absolute',
                    left: 0,
                    top: 0
                });

                console.log(`Icon ${iconId} positioned at:`, area.x + randomOffsetX, area.y + randomOffsetY);
            });
        }, 100);

        animations.start();

        window.addEventListener('resize', () => {
            animations.handleResize();
        });

        ScrollTrigger.create({
            trigger: '.projects-container',
            start: 'top bottom',
            end: 'bottom top',
            onUpdate: (self) => {
                animations.handleScroll(self.progress);
            }
        });

        const marqueeAnimation = gsap.to('.marquee-content', {
            x: '-50%',
            duration: 40,
            ease: 'none',
            repeat: -1
        });

        let isScrolling = false;
        let scrollTimeout: number | undefined;
        let isDragging = false;
        let startX = 0;
        let dragStartPos = 0;

        marquee?.addEventListener('wheel', (e) => {
            e.preventDefault();

            if (!isScrolling) {
                marqueeAnimation.pause();
                isScrolling = true;
            }

            if (scrollTimeout) clearTimeout(scrollTimeout);

            const currentX = gsap.getProperty('.marquee-content', 'x') as number;
            let newX = currentX - (e.deltaY * 2);
            
            const maxX = 0;
            const minX = -window.innerWidth;
            newX = Math.max(minX, Math.min(maxX, newX));

            gsap.set('.marquee-content', { x: newX });

            scrollTimeout = window.setTimeout(() => {
                isScrolling = false;
                marqueeAnimation.resume();
            }, 150);
        });

        marquee?.addEventListener('mousedown', (e) => {
            e.preventDefault();
            startX = e.clientX;
            dragStartPos = gsap.getProperty('.marquee-content', 'x') as number;
            marqueeAnimation.pause();
            isDragging = true;
            if (marquee) marquee.style.cursor = 'grabbing';
        });

        document.addEventListener('mousemove', (e) => {
            if (!isDragging) return;
            e.preventDefault();

            const deltaX = e.clientX - startX;
            let newX = dragStartPos + deltaX;
            
            const maxX = 0;
            const minX = -window.innerWidth;
            newX = Math.max(minX, Math.min(maxX, newX));

            gsap.set('.marquee-content', { x: newX });
        });

        document.addEventListener('mouseup', () => {
            if (isDragging) {
                isDragging = false;
                if (marquee) marquee.style.cursor = 'grab';
                
                const currentPos = gsap.getProperty('.marquee-content', 'x') as number;
                marqueeAnimation.progress((Math.abs(currentPos) / window.innerWidth) * 0.5);
                
                window.setTimeout(() => {
                    if (!isScrolling && !isDragging) {
                        marqueeAnimation.resume();
                    }
                }, 100);
            }
        });

        marquee?.addEventListener('touchstart', (e) => {
            startX = e.touches[0].clientX;
            dragStartPos = gsap.getProperty('.marquee-content', 'x') as number;
            marqueeAnimation.pause();
            isDragging = true;
        });

        marquee?.addEventListener('touchmove', (e) => {
            if (!isDragging) return;
            e.preventDefault();

            const deltaX = e.touches[0].clientX - startX;
            let newX = dragStartPos + deltaX;
            
            const maxX = 0;
            const minX = -window.innerWidth;
            newX = Math.max(minX, Math.min(maxX, newX));

            gsap.set('.marquee-content', { x: newX });
        });

        marquee?.addEventListener('touchend', () => {
            isDragging = false;
            
            const currentPos = gsap.getProperty('.marquee-content', 'x') as number;
            marqueeAnimation.progress((Math.abs(currentPos) / window.innerWidth) * 0.5);
            
            window.setTimeout(() => {
                if (!isScrolling && !isDragging) {
                    marqueeAnimation.resume();
                }
            }, 100);
        });

        marquee?.addEventListener('mouseenter', () => {
            if (!isDragging && !isScrolling) {
                marqueeAnimation.pause();
            }
            gsap.to('.marquee-content', { scale: 1.02, duration: 0.3, ease: 'power2.out' });
        });

        marquee?.addEventListener('mouseleave', () => {
            if (!isDragging && !isScrolling) {
                marqueeAnimation.resume();
            }
            gsap.to('.marquee-content', { scale: 1, duration: 0.3, ease: 'power2.out' });
        });

        cards.forEach(card => {
            const front = card.querySelector('.card-front') as HTMLElement;
            const back = card.querySelector('.card-back') as HTMLElement;

            gsap.set(back, { rotationY: 180 });

            card.addEventListener('mouseenter', () => {
                gsap.to(front, { rotationY: -180, duration: 0.6, ease: 'power2.inOut' });
                gsap.to(back, { rotationY: 0, duration: 0.6, ease: 'power2.inOut' });
            });

            card.addEventListener('mouseleave', () => {
                gsap.to(front, { rotationY: 0, duration: 0.6, ease: 'power2.inOut' });
                gsap.to(back, { rotationY: 180, duration: 0.6, ease: 'power2.inOut' });
            });
        });

        gsap.timeline({
            scrollTrigger: {
                trigger: '.projects-container',
                start: 'top 80%',
                toggleActions: 'play none none reverse'
            }
        })
        .fromTo('.section-tag', { y: 30, opacity: 0 }, { duration: 0.8, y: 0, opacity: 1, ease: 'power3.out' })
        .fromTo('.section-title', { y: 50, opacity: 0 }, { duration: 1, y: 0, opacity: 1, ease: 'power3.out' }, '-=0.6')
        .fromTo('.title-underline', { scaleX: 0 }, { duration: 1, scaleX: 1, ease: 'power3.out' }, '-=0.4');
    });
</script>